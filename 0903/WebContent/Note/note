커스텀태그(Custom Tag)

사용 이유 : "여러번 객체의 내용을 출력"을 하기 위해서는 직접쓰지 않는 한 for문의 도움을 받아야한다. 
		그렇게 되면 뷰페이지에 → 자바 코드의 개입 → 논리가 섞일 가능성이 증가한다. 
 		 이렇게 되면 협업이 어려워지므로 "객체를 여러번 출력"하는 태그를 만들어 놓고 
 		 front에서는 태그 호출을 하여 사용하게끔 하기 위해 사용된다.

 ▣ 커스텀 태그의 장점  
 1. 코드가 간결
 2. MVC기반의 개발을 보다 정확하게 하는데 큰 도움
 3. 로직 캡슐화 가능
    → 화면에서 로직을 분리
 ▣ 태그의 특징  
 	- 쌍으로 이루어짐
 	- 속성 사용가능 <img [alt]="" [src]="">
 	- 태그 바디 <jsp:useBean>태그 바디</jsp:useBean>
     	해당 태그는 태그바디를 이용하지않습니다.
     			<mytag>
      	해당 태그는 태그바디를 이용할수있습니다.
     	<mytag></mytag>  <mytag />



▣ 태그 파일 기반 커스텀태그 
 	▸ 간결한 구현 가능
 	▸ WEB-INF 파일 안에 tags 폴더를 두고 관리한다.
 	  

▣ 태그 핸들러 기반 커스텀태그 
	▸ 배포 목적 개발
	▸ 핸들러 --> '자바 클래스'를 이용.  
	▸ 커스텀 태그를 처리하는 자바클래스를 (객체)를 상속받아 구현. 
	▸ SimpleTagSupport 클래스를 상속받아 구현 .
	▸ WEB-INF 파일 안에 tld 폴더를 두고 관리한다. 
	▸ 태그파일기반은 태그파일.tag 1개면 ok
	▸ 핸들러기반은 .tld(xml설정파일 : 커스텀태그의 구조를 정의 )을 필요로함!

[tld 파일 생성 순서] 
	WEB-INF 파일 → tld폴더 생성 → tld폴더 → XMLFile생성 → 이때 이름은 000.tld 파일로 변경  →
	바로 생성하지 않고 next 클릭 
	→ Create XML File From -- Create XML file from an XML schema file 선택 
	→ Select XML Schema File -- Select XML Catalog entry 선택 
	→ XML Catalog에서  ~~.jsptaglibrary_2_0.xsd파일 선택
	→ Select Root Element -- Namespace information 에서 Prefix가 j2ee 인 라인 선택
	→ Edit 누르고   Prefix지우고 종료
	
=======================================================================================

 JSTL (JSP Standard Tag Library)  
	✿  사용목적 : View를 View답게 사용하기 위해!
	▸ 커스텀태그 라이브러리
	▸ 일반적으로  사용되는 기능들을 표준화한 라이브러리 기술
	▸ View에 프로그램적 요소가 필요한 경우, 자바코드를 대체 
	   ex) if문, for문 같은 자바 코드가 필요할때 
	▸ 5가지 주요 태그 라이브러리가 존재함
		→ 라이브러리이기 때문에 .jar 파일이 필요 ( standard.jar & jstl.jar ) * jar(java archieve file) : 자원 
		① core   
		② DB,SQL
		③ XML
		④ 국제화
		⑤ 함수
	 ▸ 핵심,core태그 라이브러리 
	 		→ 수식, 반복처리, 흐름제어, URL관리
	 			ex)스크립트릿으로 <% if, for, while %>을 사용할떄
	 앞으로 배울 내용 : Listener 클래스 
	 
	리스너 
		▸ 특정상황에 동작하는 특수한 서블릿 			
		▸ 톰캣의 시작과 종료를 모니터링    
		▸ 각각의 메서드는 톰캣의 시작과 종료에 자동호출됨 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	