Spring 

[ 스프링프레임워크 ] 
	• 프레임워크 ⇒ sw관점에서 말하자면, 어플리케이션의 전반적인 구조, 코드를 제공해 주는 것 
	• 오픈소스로 별도의 비용이 발생하지 않음
	• 다른 프레임워크와 연동이 용이 
★★★	• "*IoC와 *AOP를 지원하는 [경량]의 [컨테이너] 프레임워크 "
	    *IoC(Inversion of Control): 제어의 역행 
		  ▫ 객체간의 결합을 누가 관리했을까? : 개발자 ⇒  높은 결합도
		  ▫ 우리의 목표 = ★★낮은 결합도★★ 유지!!!를 위해 컨테이너(즉, 스프링프레임워크)가 대신 처리하게 할 것!
		  	 -의존관계를 변경할 때-
		  		자바코드를 수정   ex) DAO의 메서드 인자를 VO로 사용
		   		IoC가 적용되면 컨테이너가 객체를 생성하므로, 자바코드가 변경되지 않는다
		   		
		 *AOP(Aspect Oriented Programming): AOP방법론 == 관점자향프로그래밍
		  ▫ ~2021/09/26 까지만 해도 우리가 사용했던 방법은 OOP(객체지향프로그래밍)으로 로직을 프로그래밍하고있었음!
		  	로직이란 주업무(핵심로직)+부가적인업무(부가적로직) 로 나누어질수밖에없음
		  	 - 핵심로직  == 계좌이체 / 입출금 / 이자계산
		  	 - 부가적로직 == 로깅 / 보안관리 / 트랜잭션관리 
		  	⇒ 협업 불리, 유지보수 어려움, 재사용 불리 
		  ▫ 모든 로직을 핵심로직, 공통로직으로 분리 ⇒ ★★높은 응집도 ★★ 
		  ▫   
[ 스프링프레임워크의 장점 ]
	• [경량]
	  POJO (Plain Old Java Object == 순수자바)를 사용하기 때문에 간담함 
	  POJO가 아닌 것 == 대표적으로 Servlet
	  Servlet은 일정한 요구사항이 있어 일정조건을 맞춰줘야지만 사용가능하다 
	  POJO는 사용을 위해 특별한 규칙이 없음
	  
	• [컨테이너]
	    객체의 생성 및 객체 관리를 담당 
	  Servlet컨테이너를 지금까지 사용해왔었음 == 톰캣
	     일반적으로 서버안에 포함되어 배포함
	     스프링이 이 컨테이너 역할을 함 == 스프링도 일종의 컨테이너!
	   객체를 생성하고 관리 하는것도 하면서 객체간의 의존관계를 관리   
	     
≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡
👩🏻‍💼👨🏻‍💼두 개발자가 있다.
👩🏻‍💼 1번개발자 ) 볼륨 버튼을 누르면 1씩증가
👨🏻‍💼2번개발자 ) 볼륨 버튼을 누르면 10씩 증가		
		→ 1번개발자가 만든 리모컨을 구매한 소비자가 유지보수 요청
		→ 근데 1번개발자가 퇴사 또는 이직
		→ 2번개발자가 이어받아 유지보수함
		→ 소비자는 과연 만족할까? NO!!불만족!!
		→ 1번개발자는 소리를 1씩증가하는 버튼을 만들었는데 2번개발자는 한번에 10씩 증가함 
		     소리가 너무 커져버려 소비자가 만족하지 못함

각각 이렇게 리모컨을 제작했다.

 ⇒  "유지보수" 과정에서 일관성이 망가질수있음
≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡
  [ 프레임워크의 장점 ]
 	• 유지보수에 들어가는 인력, 비용, 시간 절감 
 	• 유지보수 과정에서 아키텍처(구조)의 변형이 발생하지 않음 ⇢ 일관성이 유지됨 
 	• 개발자는 비즈니스 로직(즉, 알고리즘)만 구현하면 됨 ⇢ 시간절감으로 이어짐
 	• 개발자의 역량이 획일화 == 개발자의 상향평준화


----------------------------------------------------------------------- 	
	현재까지 우리가 사용하던 흐름 : 사용자 -- web.xml → 톰캣 ↔ 디스패처,Controller -- 포워딩 ↔ View를 보여줌 
 	우리가 스프링을 사용하는 목표 : Controller가 변경될때, 변경될 코드를 줄여나가는 것! == 결합도를 낮추는 것!
 	설정파일로 조작해 나갈 것! → 의존성 주입 (DI :DependencyInjection)
 	
 	⇒ 비즈니스로직을 변경할때마다 코드 수정이 없도록 할것 -->이것을 설정파일로조작해나갈것인데 그 과정이 아래에 있음 
----------------------------------------------------------------------- 
   [ IoC 컨테이너 ] 	
   Servlet은 자바로 구성된 클래스 
      객체화 == 인스턴스화 가 되어야 함
        ⑴  Servlet 객체를 누가 만들어 줬을까?
        ⑵  doGet()메서드를 어떻게 호출함?
   => Servlet Container
   		서블릿 클래스 제작, web.xml 설정파일 작성 
   		
   ① web.xml 설정파일들을 loading(적재)한다. ( 외부에서 설정파일을 넘겨줌 )
   ② Servlet Container 준비
   ③ Client 가 ~.do를 Get으로 요청을 보냄  → 서블릿컨테이너로  
   ④ 설정파일을 보고 , 매핑된 서블릿 클래스를 찾아서 객체를 생성
   ⑤ doGet()메서드를 호출, 결과 다시 전송(응답 Response)		
 
 <오늘의 학습순서>
 	[ 낮은 결합도 ]
 	① 높은 결합도의 코드를 살펴보고
 	② 결합도를 낮춰볼것! 방법1) 설계를 통한 상속관계 정의 (인터페이스 사용)
 				   		  형변환  → 다형성 (Polymorphism)    
 				       방법2) BeanFactory이용
 				         : 디자인 패턴의 일종
 				                   클라이언트가 사용할 객체 생성 코드를 캡슐화
 				         Person-Phone의 결합을 낮춰줌
 				      	 → 클라이언트는 필요한 객체를 BeanFactory에 요청
 				       	  ⇒ 클라이언트가 사용할 객체를 생성하여 반환해주는 것은 BeanFactory!   
 				       